/* CSS Specificity */
/* - hierarchy that CSS uses to apply styles to HTML elements */
/* 1. Selector hierarchy */
p {
  color: red;
}
.para-class {
  color: green;
}
#para-id {
  color: blue;
}
IDs take precedence over classes, classes take precedence over HTML tags

/* 2. Directness hierarchy */
/* <!DOCTYPE html>
<html>
  <head>
    <style>
      p {
        color: red;
      }
      #div-id {
        color: blue;
      }
    </style>
  </head>
  <body>
    <div id="div-id">
      <p>Roses are red</p>
    </div>
  </body>
</html> */

paragraph p will be red as p selector applies more directly in the HTML structure than the div-id selector

/* 3. Style Location hierarchy */
/* Inline styles take precedence over internal stylesheets, internal stylesheets take precedence over external stylesheets

Type selector
- selects all elements of the same type like h1, p etc. */
h1 {
  color: maroon;
}

/* Universal selector */
/* - selects all elements of any type */
* {
  font-family: Verdana;
}

/* Class selector */
.title {
  color: teal;
}

/* Multiple classes Selector */

/* html:  */
/* <h1 class='green bold'> ... </h1> */

/* css: */
.green {
  color: green;
}

.bold {
  font-weight: bold;
}

/* We can add multiple classes to an HTML element’s class attribute by separating them with a space. This enables us to mix and match CSS classes to create many unique styles without writing a custom class for every style combination needed. */

/* ID Selector */

/* html:  */
/* <h1 class='title uppercase' id="article-title">Top Vacation Spots</h1>

css: */
#article-title {
  font-family: cursive;
}

/* Attribute Selector
- Can be used to target HTML elements that already contain attributes
- Elements of the same type can be targeted differently by their attribute or attribute value

E.g.: */
[href] {
  color: magenta;
}

/* - [href] would target all elements with an href attribute and set the color to magenta

Another more complex e.g.:
html:
<img src='/images/seasons/cold/winter.jpg'>
<img src='/images/seasons/warm/summer.jpg'>

css: */
img[src*="winter"] {
  height: 50px;
}

img[src*="summer"] {
  height: 100px;
}

/* - img[src*='winter'] ruleset looks for an img element with an attribute of src that contains the string 'winter' and then sets that height of the img to 50px
- img[src*='summer'] ruleset looks for an img element with an attribute of src that contains the string 'summer', and sets the height to 100px.

Pseudo-class
You may have observed how the appearance of certain elements can change, or be in a different state, after certain user interactions. For instance:

- When you click on an <input> element, and a blue border is added showing that it is in focus.

- When you click on a blue <a> link to visit to another page, but when you return the link’s text is purple.

- When you’re filling out a form and the submit button is grayed out and disabled. But when all of the fields have been filled out, the button has color showing that it’s active.

A pseudo-class can be attached to any selector. It is always written as a colon : followed by a name. */

p:hover {
  background-color: lime;
}
/* 
In the example above, whenever the mouse hovers over a paragraph element, the paragraph will have a lime colored background */

/* Classes and IDs combined */
/* For instance, imagine a page with two headlines. One headline needs to be bold and blue, and the other needs to be bold and green. 
 
 Instead of writing separate CSS rules for each headline that repeat each other’s code, it’s better to write a .bold CSS rule, a .green CSS rule, and a .blue CSS rule. 
 
 Then you can give one headline the '.bold green' classes, and the other the '.bold blue' classes. */

/* Specificity */
/* html: 
<h1 class= "headline" >Breaking News</h1>; */

/* css:   */
h1 {
  color: red;
}

.headline {
  color: firebrick;
}
/* In the example code above, the color of the heading would be set to firebrick, as the class selector is more specific than the type selector.  */

/* Chaining */
/* When writing CSS rules, it is possible to require an HTML element to have 2 or more CSS selectors at the same time

We do this by combining multiple selectors, referred to as chaining. For example, if there was a special class for <h1> elements, the CSS would look like this: 
*/
h1.special {
  color: blue;
}
/* The code above would select only the <h1> elements with a class of special. If a <p> element also had a class of special, the rule in the example would not style the paragraph. */

/* Descendant Combinator */
/* In addition to chaining selectors to select elements, CSS also supports selecting elements that are nested within other HTML elements, also known as descendants. For instance, consider the following HTML: */
/* html:
<ul class='main-list'>
  <li> ... </li>
  <li> ... </li>
  <li> ... </li>
</ul>
 */

/* We can select the nested <li> elements like this: */
.main-list li {
  font-weight: bold;
}

/* In the example above, .main-list selects the element with the.main-list class (the <ul> element). 

The descendant <li>‘s are selected by adding li to the selector, separated by a space. 

This results in .main-list li as the final selector. */

.description h5 {
  color: blueviolet;
}

/* This targets the h5 elements within a div element with the class .description */

/* Chaining and Specificity */
/* Chaining selectors increases specificity */

/* E.g.: */
p {
  color: blue;
}

.main p {
  color: red;
}

/* Since .main p has a class and a p type as its selector, only the <p> elements inside the .main element will appear red. 

This occurs despite there being another more general rule that states <p> elements should be blue. */

/* Multiple Selectors */
/* In order to make CSS more concise, it’s possible to add CSS styles to multiple CSS selectors all at once. 

This prevents writing repetitive code. */

/* Bad Example (repetitive): */
h1 {
  font-family: Georgia;
}

.menu {
  font-family: Georgia;
}

/* Good Example: */
h1,
.menu {
  font-family: Georgia;
}
/* By separating the CSS selectors with a comma, both the <h1> elements and the elements with the menu class will receive the font-family: Georgia styling. */

/* Recap:
- CSS can select HTML elements by type, class, ID, and attribute.

- All elements can be selected using the universal selector.

- An element can have different states using the pseudo-class selector.

-Multiple CSS classes can be applied to one HTML element.

- Classes can be reusable, while IDs can only be used once.

- IDs are more specific than classes, and classes are more specific than type. That means IDs will       override any styles from a class, and classes will override any styles from a type selector.

-Multiple selectors can be chained together to select an element. This raises the specificity but can be necessary.

- Nested elements can be selected by separating selectors with a space.

- Multiple unrelated selectors can receive the same styles by separating the selector names with commas. */
